<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;

function respawn() {
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'game');
  $game_nids = $query->execute();
  if ($game_nids) {
    foreach ($game_nids as $game_nid) {
      $query = \Drupal::entityQuery('node')
        ->condition('type', 'location')
        ->condition('field_game.target_id', $game_nid);
      $loc_nids = $query->execute();
      if ($loc_nids) {
        $loc_nodes = Node::loadMultiple($loc_nids);
        foreach ($loc_nodes as $loc_node) {
          $loc_node->field_visible_items = $loc_node->field_default_items;
          $loc_node->save();
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function slack_mud_node_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'player') {
    if ($entity->field_active->value) {
      // Get other active player nodes for the same Slack user.
      $query = \Drupal::entityQuery('node')
        ->condition('type', 'player')
        ->condition('field_active', TRUE)
        ->condition('field_slack_user_name', $entity->field_slack_user_name->value)
        ->condition('nid', $entity->id(), '<>');
      $current_player_ids = $query->execute();
      if ($current_player_ids) {
        // And mark them all inactive.
        $current_player_nodes = Node::loadMultiple($current_player_ids);
        foreach ($current_player_nodes as $current_player_node) {
          $current_player_node->field_active->value = FALSE;
          $current_player_node->save();
        }
      }
    }
  }
}

function test_commands($messages, $playerNid) {
  $eventDispatcher = \Drupal::getContainer()->get('event_dispatcher');
  $player = Drupal\node\Entity\Node::load($playerNid);
  foreach($messages as $messageText) {
    print('>' . $messageText);
    print PHP_EOL;
    $mudEvent = new \Drupal\slack_mud\Event\CommandEvent($player, $messageText);
    $mudEvent = $eventDispatcher->dispatch(\Drupal\slack_mud\Event\CommandEvent::COMMAND_EVENT, $mudEvent);
    $response = $mudEvent->getResponse();
    print($response);
    print PHP_EOL;
  }
}
